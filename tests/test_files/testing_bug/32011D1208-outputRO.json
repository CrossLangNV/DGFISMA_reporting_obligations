<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ValueError: &lt;p&gt;This action is composed of three work packages . &lt;span class=&quot;ARG0&quot;&gt;The first&lt;/span&gt; &lt;span class=&quot;ARGM-MOD&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;V&quot;&gt;deliver&lt;/span&gt; &lt;span class=&quot;ARG1&quot;&gt;two sessions of training and exercises for Member State officials on preparedness for , and response to , serious cross - border health threats&lt;/span&gt; . The training and exercises will cover the responsibilities and roles of different stakeholders ; preparedness ; crisis communication and the use of IT tools . The second work package will continue the exchange of experts started in 2011 aiming to share best practice and experience on crisis management between officials / stakeholders from the EU Member States . The third work package consists of developing a new e - learning module for the Health Emergency &amp; amp ; Diseases Information System ( Hedis ) application and a description of the different roles and functions to complement those developed in 2010 .&lt;/p&gt; // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139945204859680,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "4ymLNa2P1yfW4fOaYpZC";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>ValueError</h1>
<div class="detail">
  <p class="errormsg">ValueError: &lt;p&gt;This action is composed of three work packages . &lt;span class=&quot;ARG0&quot;&gt;The first&lt;/span&gt; &lt;span class=&quot;ARGM-MOD&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;V&quot;&gt;deliver&lt;/span&gt; &lt;span class=&quot;ARG1&quot;&gt;two sessions of training and exercises for Member State officials on preparedness for , and response to , serious cross - border health threats&lt;/span&gt; . The training and exercises will cover the responsibilities and roles of different stakeholders ; preparedness ; crisis communication and the use of IT tools . The second work package will continue the exchange of experts started in 2011 aiming to share best practice and experience on crisis management between officials / stakeholders from the EU Member States . The third work package consists of developing a new e - learning module for the Health Emergency &amp; amp ; Diseases Information System ( Hedis ) application and a description of the different roles and functions to complement those developed in 2010 .&lt;/p&gt;</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139944253052968">
  <h4>File <cite class="filename">"/work/src/reporting_obligations.py"</cite>,
      line <em class="line">279</em>,
      in <code class="function">convert_to_xml_and_fix_tags_hand_crafted</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>srl_html_output = re.sub(r'(?&lt;=[a-z][a-z][a-z])( ?[)])&lt;/span&gt;', r'&lt;/span&gt;\1', srl_html_output)</pre>
<pre class="line before"><span class="ws">        </span>srl_html_output = re.sub(r'(\([^&lt;&gt;]*?)&lt;/span&gt; \)', r'\1 )&lt;/span&gt;', srl_html_output)</pre>
<pre class="line before"><span class="ws">        </span>srl_html_output = '&lt;p&gt;' + srl_html_output + '&lt;/p&gt;'</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>srl_dom_output = parseString(srl_html_output)</pre>
<pre class="line after"><span class="ws">        </span>except:</pre>
<pre class="line after"><span class="ws">            </span>raise ValueError(srl_html_output)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># fix particular verb constructions</pre></div>
</div>

<li><div class="frame" id="frame-139944253051232">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/xml/dom/minidom.py"</cite>,
      line <em class="line">1968</em>,
      in <code class="function">parseString</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>def parseString(string, parser=None):</pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Parse a file into a DOM from a string.&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">    </span>if parser is None:</pre>
<pre class="line before"><span class="ws">        </span>from xml.dom import expatbuilder</pre>
<pre class="line current"><span class="ws">        </span>return expatbuilder.parseString(string)</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>from xml.dom import pulldom</pre>
<pre class="line after"><span class="ws">        </span>return _do_pulldom_parse(pulldom.parseString, (string,),</pre>
<pre class="line after"><span class="ws">                                 </span>{'parser': parser})</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139944253050952">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/xml/dom/expatbuilder.py"</cite>,
      line <em class="line">925</em>,
      in <code class="function">parseString</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">    </span>if namespaces:</pre>
<pre class="line before"><span class="ws">        </span>builder = ExpatBuilderNS()</pre>
<pre class="line before"><span class="ws">    </span>else:</pre>
<pre class="line before"><span class="ws">        </span>builder = ExpatBuilder()</pre>
<pre class="line current"><span class="ws">    </span>return builder.parseString(string)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def parseFragment(file, context, namespaces=True):</pre>
<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Parse a fragment of a document, given the context from which it</pre>
<pre class="line after"><span class="ws">    </span>was originally extracted.  context should be the parent of the</pre></div>
</div>

<li><div class="frame" id="frame-139944253051064">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/xml/dom/expatbuilder.py"</cite>,
      line <em class="line">223</em>,
      in <code class="function">parseString</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def parseString(self, string):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Parse a document from a string, returning the document node.&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>parser = self.getParser()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>parser.Parse(string, True)</pre>
<pre class="line after"><span class="ws">            </span>self._setup_subset(string)</pre>
<pre class="line after"><span class="ws">        </span>except ParseEscape:</pre>
<pre class="line after"><span class="ws">            </span>pass</pre>
<pre class="line after"><span class="ws">        </span>doc = self.document</pre>
<pre class="line after"><span class="ws">        </span>self.reset()</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-139944182155528">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">2463</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-139944251646360">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">2449</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139944251648320">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">1866</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-139944251646136">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/_compat.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>
</div>

<li><div class="frame" id="frame-139944251649160">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">2446</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139944251646584">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">1951</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139944251648208">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">1820</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-139944251646696">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/_compat.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>
</div>

<li><div class="frame" id="frame-139944251649944">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">1949</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139944251647536">
  <h4>File <cite class="filename">"/miniconda/lib/python3.7/site-packages/flask/app.py"</cite>,
      line <em class="line">1935</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139944251648152">
  <h4>File <cite class="filename">"/work/app.py"</cite>,
      line <em class="line">68</em>,
      in <code class="function">add_reporting_obligations</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>transformer.add_list_view( OldSofaID='html2textView', NewSofaID = 'ListView' )</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>#Find reporting obligations and add to cas:</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>reporting_obligations_finder = ReportingObligationsFinder( cas, bert_model, nlp )</pre>
<pre class="line current"><span class="ws">        </span>reporting_obligations_finder.process_sentences( ListSofaID='ListView'  )</pre>
<pre class="line after"><span class="ws">        </span>reporting_obligations_finder.add_xml_to_cas( TEMPLATE_PATH, ROSofaID='ReportingObligationsView' )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>print( f&quot;content type { request.json[ 'content_type'] } not supported by paragraph annotation app&quot; )</pre>
<pre class="line after"><span class="ws">        </span>output_json['cas_content']=request.json['cas_content']</pre></div>
</div>

<li><div class="frame" id="frame-139944252600672">
  <h4>File <cite class="filename">"/work/src/reporting_obligations.py"</cite>,
      line <em class="line">719</em>,
      in <code class="function">process_sentences</code></h4>
  <div class="source "><pre class="line before"><span class="ws">            </span>sentence=sentence.rstrip( '\r\n' )</pre>
<pre class="line before"><span class="ws">            </span>subsentence = re.sub(r'(^[^❮]+|[^❯]+$)',r'', sentence)  #finds everything between &quot; ❮ ❯ &quot; ==&gt;the main sentence</pre>
<pre class="line before"><span class="ws">            </span>if len(subsentence) &gt; 0: sentence = sentence.replace(subsentence, '', 1)  #remove everything inside &quot; ❮ ❯ &quot; from the string</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>#process the main_sentence</pre>
<pre class="line current"><span class="ws">            </span>list_xml_sentence=self.process_sentence( sentence, subsentence, True )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>#set the offset</pre>
<pre class="line after"><span class="ws">            </span>#for xml_item in list_xml_sentence:</pre>
<pre class="line after"><span class="ws">            </span>[xml_item.lastChild.setAttribute( 'original_document_begin', str(offset[0])) for xml_item in list_xml_sentence]</pre>
<pre class="line after"><span class="ws">            </span>[xml_item.lastChild.setAttribute( 'original_document_end', str(offset[1])) for xml_item in list_xml_sentence]</pre></div>
</div>

<li><div class="frame" id="frame-139944252603976">
  <h4>File <cite class="filename">"/work/src/reporting_obligations.py"</cite>,
      line <em class="line">677</em>,
      in <code class="function">process_sentence</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">            </span>#if relevant verb, and if it is the first interesting verb in this section/paragraph, ..., then save the location (section/paragraph) as an xml element in list_xml:</pre>
<pre class="line before"><span class="ws">            </span>list_location_xml=self.get_and_flush_pending_location_names()</pre>
<pre class="line before"><span class="ws">            </span>list_xml+=list_location_xml</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">            </span>srl_dom_output=self.convert_to_xml_and_fix_tags_hand_crafted(  verb, subsentence  )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>#process the paragraph (sentence) and 'verb' with spacy model</pre>
<pre class="line after"><span class="ws">            </span>srl_dom_output=self.predict_obligation_frequency( sentence, srl_dom_output  )</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>srl_dom_output=self.co_reference_resolution(  srl_dom_output  )</pre></div>
</div>

<li><div class="frame" id="frame-139944252601512">
  <h4>File <cite class="filename">"/work/src/reporting_obligations.py"</cite>,
      line <em class="line">281</em>,
      in <code class="function">convert_to_xml_and_fix_tags_hand_crafted</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>srl_html_output = '&lt;p&gt;' + srl_html_output + '&lt;/p&gt;'</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>srl_dom_output = parseString(srl_html_output)</pre>
<pre class="line before"><span class="ws">        </span>except:</pre>
<pre class="line current"><span class="ws">            </span>raise ValueError(srl_html_output)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># fix particular verb constructions</pre>
<pre class="line after"><span class="ws">        </span>args = list(filter(lambda s: match_class(s, r'^(ARG[12]|ARGM-ADV|ARGM-MNR)$'), srl_dom_output.getElementsByTagName(&quot;span&quot;)))</pre>
<pre class="line after"><span class="ws">        </span>args_pred = list(map(lambda arg: re.sub(</pre></div>
</div>
</ul>
  <blockquote>ValueError: &lt;p&gt;This action is composed of three work packages . &lt;span class=&quot;ARG0&quot;&gt;The first&lt;/span&gt; &lt;span class=&quot;ARGM-MOD&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;V&quot;&gt;deliver&lt;/span&gt; &lt;span class=&quot;ARG1&quot;&gt;two sessions of training and exercises for Member State officials on preparedness for , and response to , serious cross - border health threats&lt;/span&gt; . The training and exercises will cover the responsibilities and roles of different stakeholders ; preparedness ; crisis communication and the use of IT tools . The second work package will continue the exchange of experts started in 2011 aiming to share best practice and experience on crisis management between officials / stakeholders from the EU Member States . The third work package consists of developing a new e - learning module for the Health Emergency &amp; amp ; Diseases Information System ( Hedis ) application and a description of the different roles and functions to complement those developed in 2010 .&lt;/p&gt;</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/work/src/reporting_obligations.py&quot;, line 279, in convert_to_xml_and_fix_tags_hand_crafted
    srl_dom_output = parseString(srl_html_output)
  File &quot;/miniconda/lib/python3.7/xml/dom/minidom.py&quot;, line 1968, in parseString
    return expatbuilder.parseString(string)
  File &quot;/miniconda/lib/python3.7/xml/dom/expatbuilder.py&quot;, line 925, in parseString
    return builder.parseString(string)
  File &quot;/miniconda/lib/python3.7/xml/dom/expatbuilder.py&quot;, line 223, in parseString
    parser.Parse(string, True)
xml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 790

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 2449, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/miniconda/lib/python3.7/site-packages/flask/_compat.py&quot;, line 39, in reraise
    raise value
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/miniconda/lib/python3.7/site-packages/flask/_compat.py&quot;, line 39, in reraise
    raise value
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/miniconda/lib/python3.7/site-packages/flask/app.py&quot;, line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/work/app.py&quot;, line 68, in add_reporting_obligations
    reporting_obligations_finder.process_sentences( ListSofaID='ListView'  )
  File &quot;/work/src/reporting_obligations.py&quot;, line 719, in process_sentences
    list_xml_sentence=self.process_sentence( sentence, subsentence, True )
  File &quot;/work/src/reporting_obligations.py&quot;, line 677, in process_sentence
    srl_dom_output=self.convert_to_xml_and_fix_tags_hand_crafted(  verb, subsentence  )
  File &quot;/work/src/reporting_obligations.py&quot;, line 281, in convert_to_xml_and_fix_tags_hand_crafted
    raise ValueError(srl_html_output)
ValueError: &lt;p&gt;This action is composed of three work packages . &lt;span class=&quot;ARG0&quot;&gt;The first&lt;/span&gt; &lt;span class=&quot;ARGM-MOD&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;V&quot;&gt;deliver&lt;/span&gt; &lt;span class=&quot;ARG1&quot;&gt;two sessions of training and exercises for Member State officials on preparedness for , and response to , serious cross - border health threats&lt;/span&gt; . The training and exercises will cover the responsibilities and roles of different stakeholders ; preparedness ; crisis communication and the use of IT tools . The second work package will continue the exchange of experts started in 2011 aiming to share best practice and experience on crisis management between officials / stakeholders from the EU Member States . The third work package consists of developing a new e - learning module for the Health Emergency &amp; amp ; Diseases Information System ( Hedis ) application and a description of the different roles and functions to complement those developed in 2010 .&lt;/p&gt;</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/work/src/reporting_obligations.py", line 279, in convert_to_xml_and_fix_tags_hand_crafted
    srl_dom_output = parseString(srl_html_output)
  File "/miniconda/lib/python3.7/xml/dom/minidom.py", line 1968, in parseString
    return expatbuilder.parseString(string)
  File "/miniconda/lib/python3.7/xml/dom/expatbuilder.py", line 925, in parseString
    return builder.parseString(string)
  File "/miniconda/lib/python3.7/xml/dom/expatbuilder.py", line 223, in parseString
    parser.Parse(string, True)
xml.parsers.expat.ExpatError: not well-formed (invalid token): line 1, column 790

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 2463, in __call__
    return self.wsgi_app(environ, start_response)
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 2449, in wsgi_app
    response = self.handle_exception(e)
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 1866, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/miniconda/lib/python3.7/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 2446, in wsgi_app
    response = self.full_dispatch_request()
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 1951, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 1820, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/miniconda/lib/python3.7/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 1949, in full_dispatch_request
    rv = self.dispatch_request()
  File "/miniconda/lib/python3.7/site-packages/flask/app.py", line 1935, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/work/app.py", line 68, in add_reporting_obligations
    reporting_obligations_finder.process_sentences( ListSofaID='ListView'  )
  File "/work/src/reporting_obligations.py", line 719, in process_sentences
    list_xml_sentence=self.process_sentence( sentence, subsentence, True )
  File "/work/src/reporting_obligations.py", line 677, in process_sentence
    srl_dom_output=self.convert_to_xml_and_fix_tags_hand_crafted(  verb, subsentence  )
  File "/work/src/reporting_obligations.py", line 281, in convert_to_xml_and_fix_tags_hand_crafted
    raise ValueError(srl_html_output)
ValueError: <p>This action is composed of three work packages . <span class="ARG0">The first</span> <span class="ARGM-MOD">should</span> <span class="V">deliver</span> <span class="ARG1">two sessions of training and exercises for Member State officials on preparedness for , and response to , serious cross - border health threats</span> . The training and exercises will cover the responsibilities and roles of different stakeholders ; preparedness ; crisis communication and the use of IT tools . The second work package will continue the exchange of experts started in 2011 aiming to share best practice and experience on crisis management between officials / stakeholders from the EU Member States . The third work package consists of developing a new e - learning module for the Health Emergency & amp ; Diseases Information System ( Hedis ) application and a description of the different roles and functions to complement those developed in 2010 .</p>

-->
